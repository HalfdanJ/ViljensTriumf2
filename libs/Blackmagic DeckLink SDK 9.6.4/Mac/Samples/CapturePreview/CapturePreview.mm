/* -LICENSE-START-
 ** Copyright (c) 2011 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 ** 
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 ** 
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#import "CapturePreview.h"
#import "DeckLinkController.h"

using namespace std;

@implementation CapturePreviewAppDelegate

@synthesize window;

- (id)init
{
	self = [super init];
	if (self)
	{
		ancillaryDataValues = [[NSMutableArray arrayWithObjects:@"", @"", @"", @"", @"", @"", @"", @"", @"", @"", nil] retain];
		ancillaryDataTypes = [[NSMutableArray arrayWithObjects:
							@"VITC Timecode field 1", 
							@"VITC User bits field 1", 
							@"VITC Timecode field 2", 
							@"VITC User bits field 2", 
							@"RP188 VITC1 Timecode", 
							@"RP188 VITC1 User bits",
							@"RP188 LTC Timecode", 
						    @"RP188 LTC User bits",
							@"RP188 VITC2 Timecode", 
							@"RP188 VITC2 User bits",
							nil] retain];
	}
	return self;
}

- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {
	NSMutableArray*		deviceNames;
	int					deviceIndex;	
	
	// Empty popup menus
	[deviceListPopup removeAllItems];
	[modeListPopup removeAllItems];

	
	// Create and initialise DeckLink controller
	deckLinkController = new DeckLinkController(self);
	if (deckLinkController->init(previewView) == false)
	{
		// Disable the interface
		[startStopButton setEnabled:NO];
		[self enableInterface:NO];
		return;
	}
	
	// Populate DeckLink device menu
	deviceNames = deckLinkController->getDeviceNameList();
	for (deviceIndex = 0; deviceIndex < [deviceNames count]; deviceIndex++)
	{
		// Add this DeckLink device to the device list
		[deviceListPopup addItemWithTitle:[deviceNames objectAtIndex:deviceIndex]];
	}
	
	// Refresh the UI for the selected device
	[deviceListPopup selectItemAtIndex:0];
	[self newDeviceSelected:nil];
	
	[ancillaryDataTable reloadData];
}


- (void)showErrorMessage:(NSString*)message title:(NSString*)title
{
	NSRunAlertPanel(title, message, @"OK", nil, nil);
}


- (void)refreshVideoModeList
{
	NSMutableArray*		modeNames;
	int					modeIndex = 0;
	
	// Clear the menu
	[modeListPopup removeAllItems];
	
	// Get the mode names
	modeNames = deckLinkController->getDisplayModeNames();
	
	// Add them to the menu
	while (modeIndex < [modeNames count])
		[modeListPopup addItemWithTitle:[modeNames objectAtIndex:modeIndex++]];	
}


- (IBAction)newDeviceSelected:(id)sender
{
	// Generate the mode list for this device
	if (! deckLinkController->selectDevice([deviceListPopup indexOfSelectedItem]))
		return;
	
	// Update the video mode popup menu
	[self refreshVideoModeList];
	
	// Enable the interface
	[self enableInterface:YES];
}


- (IBAction)toggleStart:(id)sender
{
	if (deckLinkController->isCapturing())
		[self stopCapture];
	else
		[self startCapture];
}


- (void)startCapture
{
	if (deckLinkController->startCapture([modeListPopup indexOfSelectedItem]))
	{
		// Update UI
		[startStopButton setTitle:@"Stop"];
		[self enableInterface: NO];
	}
}


- (void)stopCapture
{
	deckLinkController->stopCapture();
	
	// Update UI
	[startStopButton setTitle:@"Start"];
	[self enableInterface:YES];
	[noValidSource setHidden:YES];

}


- (void)enableInterface:(BOOL)enabled
{
	[deviceListPopup setEnabled:enabled];
	[modeListPopup setEnabled:enabled];
	
	if (enabled == TRUE)
	{
		if (deckLinkController->isFormatDetectionEnabled())
		{
			[applyDetectedVideoMode setEnabled:TRUE];
			[applyDetectedVideoMode setState:NSOnState];
		}
		else
		{
			[applyDetectedVideoMode setEnabled:FALSE];
			[applyDetectedVideoMode setState:NSOffState];
		}
	}
	else 
		[applyDetectedVideoMode setEnabled:FALSE];
}


- (BOOL)shouldRestartCaptureWithNewVideoMode
{
	return ([applyDetectedVideoMode state] == NSOnState) ? YES : NO;
}


- (void)updateInputSourceState:(BOOL)state
{	
	// Check if the state has changed
	if ([noValidSource isHidden] != state)
	{
		[noValidSource setHidden:state];		
	}
}


- (void)selectDetectedVideoModeWithIndex:(UInt32)newVideoModeIndex
{
	[modeListPopup selectItemAtIndex:newVideoModeIndex];
}

- (void)updateAncillaryData:(AncillaryDataStruct*) latestAncillaryDataValues
{
	// VITC
	[ancillaryDataValues replaceObjectAtIndex:0 withObject:latestAncillaryDataValues->vitcF1Timecode];
	[ancillaryDataValues replaceObjectAtIndex:1 withObject:latestAncillaryDataValues->vitcF1UserBits];
	[ancillaryDataValues replaceObjectAtIndex:2 withObject:latestAncillaryDataValues->vitcF2Timecode];
	[ancillaryDataValues replaceObjectAtIndex:3 withObject:latestAncillaryDataValues->vitcF2UserBits];
	
	// RP188
	[ancillaryDataValues replaceObjectAtIndex:4 withObject:latestAncillaryDataValues->rp188vitc1Timecode];
	[ancillaryDataValues replaceObjectAtIndex:5 withObject:latestAncillaryDataValues->rp188vitc1UserBits];
	[ancillaryDataValues replaceObjectAtIndex:6 withObject:latestAncillaryDataValues->rp188ltcTimecode];
	[ancillaryDataValues replaceObjectAtIndex:7 withObject:latestAncillaryDataValues->rp188ltcUserBits];
	[ancillaryDataValues replaceObjectAtIndex:8 withObject:latestAncillaryDataValues->rp188vitc2Timecode];
	[ancillaryDataValues replaceObjectAtIndex:9 withObject:latestAncillaryDataValues->rp188vitc2UserBits];
	
	[ancillaryDataTable reloadData];
}

- (id)tableView:(NSTableView *)aTableView objectValueForTableColumn:(NSTableColumn *)aTableColumn row:(NSInteger)rowIndex
{
	if (([aTableColumn identifier] != nil) && [[aTableColumn identifier] isEqualToString:@"Type"])
	{
		if (rowIndex >= [ancillaryDataTypes count])
			return @"unknown row";
		
		// return ancillary data labels
		return [ancillaryDataTypes objectAtIndex:rowIndex];
	}
	
	if (([aTableColumn identifier] != nil) && [[aTableColumn identifier] isEqualToString:@"Value"])
	{
		if (rowIndex >= [ancillaryDataValues count])
			return @"unknown row";
		
		// return ancillary data values
		return [ancillaryDataValues objectAtIndex:rowIndex];
	}
	
	return @"unknown column";
}

- (NSInteger)numberOfRowsInTableView:(NSTableView *)aTableView
{
	return [ancillaryDataValues count];
}

- (void)dealloc
{
	// Stop the capture
	[self stopCapture];
	
	// Release member variables
	delete deckLinkController;	
	[ancillaryDataValues release];
	[ancillaryDataTypes release];
	
	[super dealloc];
}

@end

